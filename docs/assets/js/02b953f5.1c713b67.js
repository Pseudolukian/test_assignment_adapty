"use strict";(self.webpackChunkadapty_docs=self.webpackChunkadapty_docs||[]).push([[5921],{11470:(e,n,t)=>{t.d(n,{A:()=>j});var i=t(96540),a=t(34164),r=t(23104),o=t(56347),d=t(205),s=t(57485),l=t(31682),c=t(70679);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:a}}=e;return{value:n,label:t,attributes:i,default:a}}))}(t);return function(e){const n=(0,l.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=p(e),[o,s]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[l,u]=f({queryString:t,groupId:a}),[m,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,c.Dv)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),y=(()=>{const e=l??m;return h({value:e,tabValues:r})?e:null})();(0,d.A)((()=>{y&&s(y)}),[y]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var g=t(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function w(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:d}=e;const s=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),c=e=>{const n=e.currentTarget,t=s.indexOf(n),a=d[t].value;a!==i&&(l(n),o(a))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:d.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>s.push(e),onKeyDown:u,onClick:c,...r,className:(0,a.A)("tabs__item",y.tabItem,r?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function A(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function x(e){const n=m(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",y.tabList),children:[(0,b.jsx)(w,{...n,...e}),(0,b.jsx)(A,{...n,...e})]})}function j(e){const n=(0,g.A)();return(0,b.jsx)(x,{...e,children:u(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var i=t(34164);const a={tabItem:"tabItem_Ymn6"};var r=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.A)(a.tabItem,o),hidden:t,children:n})}},38570:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>l,toc:()=>u});var i=t(74848),a=t(28453),r=t(11470),o=t(19365);const d={title:"Migration guide to Adapty iOS SDK 3.3.x",description:"",metadataTitle:""},s=void 0,l={id:"migration-to-ios330",title:"Migration guide to Adapty iOS SDK 3.3.x",description:"",source:"@site/versioned_docs/version-3.0/migration-to-ios330.md",sourceDirName:".",slug:"/migration-to-ios330",permalink:"/test_assignment_adapty/docs/migration-to-ios330",draft:!1,unlisted:!1,tags:[],version:"3.0",frontMatter:{title:"Migration guide to Adapty iOS SDK 3.3.x",description:"",metadataTitle:""},sidebar:"tutorialSidebar",previous:{title:"Migration guide to Adapty iOS SDK 3.3.x",permalink:"/test_assignment_adapty/docs/migration-to-330"},next:{title:"Migration guide to Android Adapty SDK 3.3",permalink:"/test_assignment_adapty/docs/migration-to-android330"}},c={},u=[{value:"Rename Adapty.Configuration to AdaptyConfiguration",id:"rename-adaptyconfiguration-to-adaptyconfiguration",level:2},{value:"Rename getViewConfiguration method to getPaywallConfiguration",id:"rename-getviewconfiguration-method-to-getpaywallconfiguration",level:2},{value:"Change parameters in SwiftUI",id:"change-parameters-in-swiftui",level:2},{value:"Update handling of promotional in-app purchases from App Store",id:"update-handling-of-promotional-in-app-purchases-from-app-store",level:2},{value:"Remove getProductsIntroductoryOfferEligibility method",id:"remove-getproductsintroductoryoffereligibility-method",level:2},{value:"Update third-party integration SDK configuration",id:"update-third-party-integration-sdk-configuration",level:2},{value:"Adjust",id:"adjust",level:3},{value:"AirBridge",id:"airbridge",level:3},{value:"Amplitude",id:"amplitude",level:3},{value:"AppMetrica",id:"appmetrica",level:3},{value:"AppsFlyer",id:"appsflyer",level:3},{value:"Branch",id:"branch",level:3},{value:"Facebook Ads",id:"facebook-ads",level:3},{value:"Firebase and Google Analytics",id:"firebase-and-google-analytics",level:3},{value:"Mixpanel",id:"mixpanel",level:3},{value:"OneSignal",id:"onesignal",level:3},{value:"Pushwoosh",id:"pushwoosh",level:3},{value:"Update Observer mode implementation",id:"update-observer-mode-implementation",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Adapty SDK 3.3.0 is a major release that brought some improvements which however may require some migration steps from you."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Rename ",(0,i.jsx)(n.code,{children:"Adapty.Configuration"})," to ",(0,i.jsx)(n.code,{children:"AdaptyConfiguration"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Rename the ",(0,i.jsx)(n.code,{children:"getViewConfiguration"})," method to ",(0,i.jsx)(n.code,{children:"getPaywallConfiguration"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Remove the ",(0,i.jsx)(n.code,{children:"didCancelPurchase"})," and ",(0,i.jsx)(n.code,{children:"paywall"})," parameters from SwiftUI, and rename the ",(0,i.jsx)(n.code,{children:"viewConfiguration"})," parameter to ",(0,i.jsx)(n.code,{children:"paywallConfiguration"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Update how you process promotional in-app purchases from the App Store by removing the ",(0,i.jsx)(n.code,{children:"defermentCompletion"})," parameter from the ",(0,i.jsx)(n.code,{children:"AdaptyDelegate"})," method."]}),"\n",(0,i.jsxs)(n.li,{children:["Remove the ",(0,i.jsx)(n.code,{children:"getProductsIntroductoryOfferEligibility"})," method."]}),"\n",(0,i.jsx)(n.li,{children:"Update integration configurations for Adjust, AirBridge, Amplitude, AppMetrica, Appsflyer, Branch, Facebook Ads, Firebase and Google Analytics, Mixpanel, OneSignal, Pushwoosh."}),"\n",(0,i.jsx)(n.li,{children:"Update Observer mode implementation."}),"\n"]}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/9Xs8d0lt_RY?si=xvWhUO2tlG1tKP5f",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0})}),"\n",(0,i.jsx)(n.h2,{id:"rename-adaptyconfiguration-to-adaptyconfiguration",children:"Rename Adapty.Configuration to AdaptyConfiguration"}),"\n",(0,i.jsx)(n.p,{children:"Update the code of Adapty iOS SDK activation in the following way:"}),"\n",(0,i.jsxs)(r.A,{groupId:"current-os",queryString:!0,children:[(0,i.jsx)(o.A,{value:"swift",label:"Swift",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:'// In your AppDelegate class:\nimport Adapty\n\nlet configurationBuilder =\n-        Adapty.Configuration\n+        AdaptyConfiguration\n          .builder(withAPIKey: "PUBLIC_SDK_KEY")\n          .with(observerMode: false)\n          .with(customerUserId: "YOUR_USER_ID")\n          .with(idfaCollectionDisabled: false)\n          .with(ipAddressCollectionDisabled: false)\n\nAdapty.activate(with: configurationBuilder) { error in\n  // handle the error\n}\n'})})}),(0,i.jsx)(o.A,{value:"swiftui",label:"SwiftUI",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:'import Adapty\n\n@main\nstruct SampleApp: App {\n    init() \n      let configurationBuilder =\n-        Adapty.Configuration\n+        AdaptyConfiguration\n          .builder(withAPIKey: "PUBLIC_SDK_KEY")\n          .with(observerMode: false) // optional\n          .with(customerUserId: "YOUR_USER_ID") // optional\n          .with(idfaCollectionDisabled: false) // optional\n          .with(ipAddressCollectionDisabled: false) // optional\n\n        Task {\n            try await Adapty.activate(with: configurationBuilder)\n        }\n    }\n\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}\n'})})})]}),"\n",(0,i.jsx)(n.h2,{id:"rename-getviewconfiguration-method-to-getpaywallconfiguration",children:"Rename getViewConfiguration method to getPaywallConfiguration"}),"\n",(0,i.jsxs)(n.p,{children:["Update the method name to fetch the paywall's ",(0,i.jsx)(n.code,{children:"viewConfiguration"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:"import Adapty\nimport AdaptyUI\n\nguard paywall.hasViewConfiguration else {\n    //  use your custom logic\n    return\n}\n\ndo {\n-    let paywallConfiguration = try await AdaptyUI.getViewConfiguration(\n+    let paywallConfiguration = try await AdaptyUI.getPaywallConfiguration(\n            forPaywall: paywall\n    )\n    // use loaded configuration\n} catch {\n    // handle the error\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For more details about the method, check out ",(0,i.jsx)(n.a,{href:"get-pb-paywalls#fetch-the-view-configuration-of-paywall-designed-using-paywall-builder",children:"Fetch the view configuration of paywall designed using Paywall Builder"}),".."]}),"\n",(0,i.jsx)(n.h2,{id:"change-parameters-in-swiftui",children:"Change parameters in SwiftUI"}),"\n",(0,i.jsx)(n.p,{children:"The following updates have been made to SwiftUI:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"didCancelPurchase"})," parameter has been removed. Use ",(0,i.jsx)(n.code,{children:"didFinishPurchase"})," instead."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:".paywall()"})," method no longer accepts a paywall object."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"paywallConfiguration"})," parameter has replaced the ",(0,i.jsx)(n.code,{children:"viewConfiguration"})," parameter."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Update your code like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:'@State var paywallPresented = false\n\nvar body: some View {\n\tText("Hello, AdaptyUI!")\n\t\t\t.paywall(\n          isPresented: $paywallPresented,\n-         paywall: <paywall object>,\n-         viewConfiguration: <LocalizedViewConfiguration>,\n+         paywallConfiguration: <AdaptyUI.PaywallConfiguration>,\n          didPerformAction: { action in\n              switch action {\n                  case .close:\n                      paywallPresented = false\n                  default:\n                      // Handle other actions\n                      break\n              }\n          },\n-         didFinishPurchase: { product, profile in paywallPresented = false },\n+         didFinishPurchase: { product, purchaseResult in /* handle the result*/ },\n          didFailPurchase: { product, error in /* handle the error */ },\n          didFinishRestore: { profile in /* check access level and dismiss */  },\n          didFailRestore: { error in /* handle the error */ },\n          didFailRendering: { error in paywallPresented = false }\n-         didCancelPurchase: { product in /* handle the result*/}\n\n      )\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"update-handling-of-promotional-in-app-purchases-from-app-store",children:"Update handling of promotional in-app purchases from App Store"}),"\n",(0,i.jsxs)(n.p,{children:["Update how you handle promotional in-app purchases from the App Store by removing the ",(0,i.jsx)(n.code,{children:"defermentCompletion"})," parameter from the ",(0,i.jsx)(n.code,{children:"AdaptyDelegate"})," method, as shown in the example below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:'showLineNumbers title="Swift"',children:"final class YourAdaptyDelegateImplementation: AdaptyDelegate {\n    nonisolated func shouldAddStorePayment(for product: AdaptyDeferredProduct) -> Bool {\n        // 1a.\n        // Return `true` to continue the transaction in your app.\n\n        // 1b.\n        // Store the product object and return `false` to defer or cancel the transaction.\n        false\n    }\n    \n    // 2. Continue the deferred purchase later on by passing the product to `makePurchase`\n    func continueDeferredPurchase() async {\n        let storedProduct: AdaptyDeferredProduct = // get the product object from the 1b.\n        do {\n            try await Adapty.makePurchase(product: storedProduct)\n        } catch {\n            // handle the error\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"remove-getproductsintroductoryoffereligibility-method",children:"Remove getProductsIntroductoryOfferEligibility method"}),"\n",(0,i.jsx)(n.p,{children:"Before Adapty iOS SDK 3.3.0, the product object always included offers, regardless of whether the user was eligible. You had to manually check eligibility before using the offer."}),"\n",(0,i.jsx)(n.p,{children:"Now, the product object only includes an offer if the user is eligible. This means you no longer need to check eligibility \u2014 if an offer is present, the user is eligible."}),"\n",(0,i.jsxs)(n.p,{children:["If you still want to view offers for users who are not eligible, refer to ",(0,i.jsx)(n.code,{children:"sk1Product"})," and ",(0,i.jsx)(n.code,{children:"sk2Product"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"update-third-party-integration-sdk-configuration",children:"Update third-party integration SDK configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Starting with Adapty iOS SDK 3.3.0, we\u2019ve updated the public API for the ",(0,i.jsx)(n.code,{children:"updateAttribution"})," method. Previously, it accepted a ",(0,i.jsx)(n.code,{children:"[AnyHashable: Any]"})," dictionary, allowing you to pass attribution objects directly from various services. Now, it requires a ",(0,i.jsx)(n.code,{children:"[String: any Sendable]"}),", so you\u2019ll need to convert attribution objects before passing them."]}),"\n",(0,i.jsx)(n.p,{children:"To ensure integrations work properly with Adapty iOS SDK 3.3.0 and later, update your SDK configurations for the following integrations as described in the sections below."}),"\n",(0,i.jsx)(n.h3,{id:"adjust",children:"Adjust"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"adjust#sdk-configuration",children:"SDK configuration for Adjust integration"}),"."]}),"\n",(0,i.jsxs)(r.A,{groupId:"current-os",queryString:!0,children:[(0,i.jsx)(o.A,{value:"v5",label:"Adjust 5.x+",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:'class AdjustModuleImplementation {\n-    func updateAdjustAttribution() {\n-        Adjust.attribution { attribution in\n-            guard let attributionDictionary = attribution?.dictionary()?.toSendableDict() else { return }\n-\n-            Adjust.adid { adid in\n-                guard let adid else { return }\n-\n-                Adapty.updateAttribution(attributionDictionary, source: .adjust, networkUserId: adid) { error in\n-                    // handle the error\n-                }\n-            }\n-        }\n-    }\n\n+    func updateAdjustAdid() {\n+        Adjust.adid { adid in\n+            guard let adid else { return }\n+\n+            Adapty.setIntegrationIdentifier(key: "adjust_device_id", value: adid)\n+        }\n+    }\n+\n+    func updateAdjustAttribution() {\n+        Adjust.attribution { attribution in\n+            guard let attribution = attribution?.dictionary() else { \n+                return\n+            }\n+            \n+            Adapty.updateAttribution(attribution, source: "adjust")\n+        }\n+    }\n}\n'})})}),(0,i.jsx)(o.A,{value:"v4",label:"Adjust 4.x",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:'class YourAdjustDelegateImplementation {\n    // Find your implementation of AdjustDelegate \n    // and update adjustAttributionChanged method:\n    func adjustAttributionChanged(_ attribution: ADJAttribution?) {\n-       if let attribution = attribution?.dictionary()?.toSendableDict() {\n-           Adapty.updateAttribution(attribution, source: .adjust)\n+       if let attribution = attribution?.dictionary() {\n+           Adapty.updateAttribution(attribution, source: "adjust")\n        }\n    }\n}\n'})})})]}),"\n",(0,i.jsx)(n.h3,{id:"airbridge",children:"AirBridge"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"airbridge#sdk-configuration",children:"SDK configuration for AirBridge integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:' import AirBridge\n\n- let builder = AdaptyProfileParameters.Builder()\n-             .with(airbridgeDeviceId: AirBridge.deviceUUID())\n-\n- Adapty.updateProfile(params: builder.build())\n\n+ do {\n+     try await Adapty.setIntegrationIdentifier(\n+         key: "airbridge_device_id", \n+         value: AirBridge.deviceUUID()\n+     )\n+ } catch {\n+     // handle the error\n+ }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"amplitude",children:"Amplitude"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"amplitude#sdk-configuration",children:"SDK configuration for Amplitude integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:' import Amplitude \n\n- let builder = AdaptyProfileParameters.Builder()\n-             .with(amplitudeUserId: Amplitude.instance().userId)\n-             .with(amplitudeDeviceId: Amplitude.instance().deviceId)\n-\n- Adapty.updateProfile(params: builder.build())\n\n+ do {\n+     try await Adapty.setIntegrationIdentifier(\n+         key: "amplitude_user_id", \n+         value: Amplitude.instance().userId\n+     )\n+     try await Adapty.setIntegrationIdentifier(\n+         key: "amplitude_device_id", \n+         value: Amplitude.instance().deviceId\n+     )\n+ } catch {\n+     // handle the error\n+ }\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"appmetrica",children:"AppMetrica"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"appmetrica#sdk-configuration",children:"SDK configuration for AppMetrica integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:' import AppMetricaCore\n        \n- if let deviceID = AppMetrica.deviceID {\n-   let builder = AdaptyProfileParameters.Builder()\n-     .with(appmetricaDeviceId: deviceID)\n-     .with(appmetricaProfileId: "YOUR_ADAPTY_CUSTOMER_USER_ID")\n-\n-   Adapty.updateProfile(params: builder.build())\n- }\n\n+ if let deviceID = AppMetrica.deviceID {\n+     do {\n+         try await Adapty.setIntegrationIdentifier(\n+             key: "appmetrica_device_id", \n+             value: deviceID\n+         )\n+         try await Adapty.setIntegrationIdentifier(\n+             key: "appmetrica_profile_id", \n+             value: "YOUR_ADAPTY_CUSTOMER_USER_ID"\n+         )\n+     } catch {\n+         // handle the error\n+     }\n+ }\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"appsflyer",children:"AppsFlyer"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"appsflyer#sdk-configuration",children:"SDK configuration for AppsFlyer integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:'class YourAppsFlyerLibDelegateImplementation {\n    // Find your implementation of AppsFlyerLibDelegate \n    // and update onConversionDataSuccess method:\n     func onConversionDataSuccess(_ conversionInfo: [AnyHashable : Any]) {\n         let uid = AppsFlyerLib.shared().getAppsFlyerUID()\n\n-        Adapty.updateAttribution(\n-           conversionInfo.toSendableDict(),\n-            source: .appsflyer,\n-            networkUserId: uid\n-        )\n+        Adapty.setIntegrationIdentifier(key: "appsflyer_id", value: uid)\n+        Adapty.updateAttribution(conversionInfo, source: "appsflyer")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"branch",children:"Branch"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"branch#sdk-configuration",children:"SDK configuration for Branch integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:'class YourBranchImplementation {\n    func initializeBranch() {\n        // Pass the attribution you receive from the initializing method of Branch iOS SDK to Adapty.\n        Branch.getInstance().initSession(launchOptions: launchOptions) { (data, error) in\n-           if let data = data?.toSendableDict() {\n-                Adapty.updateAttribution(data, source: .branch)\n-           }\n+           if let data {\n+               Adapty.updateAttribution(data, source: "branch")\n+           }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"facebook-ads",children:"Facebook Ads"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"facebook-ads#sdk-configuration",children:"SDK configuration for Facebook Ads integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:' import FacebookCore\n\n- let builder = AdaptyProfileParameters.Builder()\n-     .with(facebookAnonymousId: AppEvents.shared.anonymousID)\n-\n- do {\n-     try Adapty.updateProfile(params: builder.build())\n- } catch {\n-     // handle the error\n- }\n\n+ do {\n+     try await Adapty.setIntegrationIdentifier(\n+         key: "facebook_anonymous_id", \n+         value: AppEvents.shared.anonymousID\n+     )\n+ } catch {\n+     // handle the error\n+ }\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"firebase-and-google-analytics",children:"Firebase and Google Analytics"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"firebase-and-google-analytics",children:"SDK configuration for Firebase and Google Analytics integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:' import FirebaseCore\n import FirebaseAnalytics\n\n FirebaseApp.configure()\n        \n- if let appInstanceId = Analytics.appInstanceID() {            \n-     let builder = AdaptyProfileParameters.Builder()\n-         .with(firebaseAppInstanceId: appInstanceId)\n            \n-     Adapty.updateProfile(params: builder.build()) { error in\n-         // handle error\n-     }\n- }\n\n+ if let appInstanceId = Analytics.appInstanceID() {            \n+     do {\n+         try await Adapty.setIntegrationIdentifier(\n+             key: "firebase_app_instance_id", \n+             value: appInstanceId\n+         )\n+     } catch {\n+         // handle the error\n+     }\n+ }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mixpanel",children:"Mixpanel"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"mixpanel#sdk-configuration",children:"SDK configuration for Mixpanel integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:' import Mixpanel\n\n- let builder = AdaptyProfileParameters.Builder()\n-             .with(mixpanelUserId: Mixpanel.mainInstance().distinctId)\n-\n- do {\n-     try await Adapty.updateProfile(params: builder.build())\n- } catch {\n-     // handle the error\n- }\n\n+ do {\n+     try await Adapty.setIntegrationIdentifier(\n+         key: "mixpanel_user_id", \n+         value: Mixpanel.mainInstance().distinctId\n+     )\n+ } catch {\n+     // handle the error\n+ }\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"onesignal",children:"OneSignal"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"onesignal#sdk-configuration",children:"SDK configuration for OneSignal integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:' // PlayerID (pre-v5 OneSignal SDK)\n // in your OSSubscriptionObserver implementation\n func onOSSubscriptionChanged(_ stateChanges: OSSubscriptionStateChanges) {\n     if let playerId = stateChanges.to.userId {\n-         let params = AdaptyProfileParameters.Builder()\n-             .with(oneSignalPlayerId: playerId)\n-             .build()\n-\n-         Adapty.updateProfile(params:params) { error in\n-             // check error\n-         }\n+         Task {\n+             try await Adapty.setIntegrationIdentifier(\n+                 key: "one_signal_player_id", \n+                 value: playerId\n+             )\n+         }\n     }\n }\n\n // SubscriptionID (v5+ OneSignal SDK)\n OneSignal.Notifications.requestPermission({ accepted in\n-     let id = OneSignal.User.pushSubscription.id\n-\n-     let builder = AdaptyProfileParameters.Builder()\n-         .with(oneSignalSubscriptionId: id)\n-\n-     Adapty.updateProfile(params: builder.build())\n+     Task {\n+         try await Adapty.setIntegrationIdentifier(\n+             key: "one_signal_subscription_id", \n+             value: OneSignal.User.pushSubscription.id\n+         )\n+     }\n }, fallbackToSettings: true)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pushwoosh",children:"Pushwoosh"}),"\n",(0,i.jsxs)(n.p,{children:["Update your mobile app code as shown below. For the complete code example, check out the ",(0,i.jsx)(n.a,{href:"pushwoosh#sdk-configuration",children:"SDK configuration for Pushwoosh integration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:'- let params = AdaptyProfileParameters.Builder()\n-     .with(pushwooshHWID: Pushwoosh.sharedInstance().getHWID())\n-     .build()\n-\n- Adapty.updateProfile(params: params) { error in\n-     // handle the error\n- }\n\n+ do {\n+     try await Adapty.setIntegrationIdentifier(\n+         key: "pushwoosh_hwid", \n+         value: Pushwoosh.sharedInstance().getHWID()\n+     )\n+ } catch {\n+     // handle the error\n+ }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"update-observer-mode-implementation",children:"Update Observer mode implementation"}),"\n",(0,i.jsxs)(n.p,{children:["Update how you link paywalls to transactions. Previously, you used the ",(0,i.jsx)(n.code,{children:"setVariationId"})," method to assign the ",(0,i.jsx)(n.code,{children:"variationId"}),". Now, you can include the ",(0,i.jsx)(n.code,{children:"variationId"})," directly when recording the transaction using the new ",(0,i.jsx)(n.code,{children:"reportTransaction"})," method. Check out the final code example in the ",(0,i.jsx)(n.a,{href:"report-transactions-observer-mode",children:"Associate paywalls with purchase transactions in Observer mode"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Remember to record the transaction using the ",(0,i.jsx)(n.code,{children:"reportTransaction"})," method. Skipping this step means Adapty won't recognize the transaction, grant access levels, include it in analytics, or send it to integrations. This step is essential!"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",metastring:"showLineNumbers",children:"- let variationId = paywall.variationId\n-\n- // There are two overloads: for StoreKit 1 and StoreKit 2\n- Adapty.setVariationId(variationId, forPurchasedTransaction: transaction) { error in\n-     if error == nil {\n-         // successful binding\n-     }\n- }\n\n+ do {\n+     // every time when calling transaction.finish()\n+     try await Adapty.reportTransaction(transaction, withVariationId: <YOUR_PAYWALL_VARIATION_ID>)\n+ } catch {\n+     // handle the error\n+ }\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);