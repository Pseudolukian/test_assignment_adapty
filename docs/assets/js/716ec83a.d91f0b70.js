"use strict";(self.webpackChunkadapty_docs=self.webpackChunkadapty_docs||[]).push([[7909],{11470:(e,t,n)=>{n.d(t,{A:()=>b});var a=n(96540),s=n(34164),l=n(23104),r=n(56347),i=n(205),o=n(57485),d=n(31682),c=n(70679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:s}}=e;return{value:t,label:n,attributes:a,default:s}}))}(n);return function(e){const t=(0,d.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const s=(0,r.W6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o.aZ)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(s.location.search);t.set(l,e),s.replace({...s.location,search:t.toString()})}),[l,s])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,l=h(e),[r,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[d,u]=y({queryString:n,groupId:s}),[m,w]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,l]=(0,c.Dv)(n);return[s,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:s}),g=(()=>{const e=d??m;return p({value:e,tabValues:l})?e:null})();(0,i.A)((()=>{g&&o(g)}),[g]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),w(e)}),[u,w,l]),tabValues:l}}var w=n(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(74848);function x(e){let{className:t,block:n,selectedValue:a,selectValue:r,tabValues:i}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),c=e=>{const t=e.currentTarget,n=o.indexOf(t),s=i[n].value;s!==a&&(d(t),r(s))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:l}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>o.push(e),onKeyDown:u,onClick:c,...l,className:(0,s.A)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:s}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function j(e){const t=m(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,f.jsx)(x,{...t,...e}),(0,f.jsx)(v,{...t,...e})]})}function b(e){const t=(0,w.A)();return(0,f.jsx)(j,{...e,children:u(e.children)},String(t))}},19365:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);var a=n(34164);const s={tabItem:"tabItem_Ymn6"};var l=n(74848);function r(e){let{children:t,hidden:n,className:r}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:n,children:t})}},46671:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>y,frontMatter:()=>o,metadata:()=>c,toc:()=>h});var a=n(74848),s=n(28453),l=(n(26393),n(11470)),r=n(19365),i=n(97808);const o={title:"Android - Present new Paywall Builder paywalls",description:"Learn how to present paywalls on Android for effective monetization.",metadataTitle:"Presenting Paywalls on Android | Adapty Docs"},d=void 0,c={id:"android-present-paywalls",title:"Android - Present new Paywall Builder paywalls",description:"Learn how to present paywalls on Android for effective monetization.",source:"@site/versioned_docs/version-3.0/android-present-paywalls.md",sourceDirName:".",slug:"/android-present-paywalls",permalink:"/test_assignment_adapty/docs/android-present-paywalls",draft:!1,unlisted:!1,tags:[],version:"3.0",frontMatter:{title:"Android - Present new Paywall Builder paywalls",description:"Learn how to present paywalls on Android for effective monetization.",metadataTitle:"Presenting Paywalls on Android | Adapty Docs"},sidebar:"tutorialSidebar",previous:{title:"iOS",permalink:"/test_assignment_adapty/docs/ios-present-paywalls"},next:{title:"Flutter",permalink:"/test_assignment_adapty/docs/flutter-present-paywalls"}},u={},h=[...i.RM,{value:"Change paywall insets",id:"change-paywall-insets",level:2},{value:"Use developer-defined timer",id:"use-developer-defined-timer",level:2},{value:"Use custom tags",id:"use-custom-tags",level:2},{value:"Change paywall loading indicator color",id:"change-paywall-loading-indicator-color",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"If you've customized a paywall using the Paywall Builder, you don't need to worry about rendering it in your mobile app code to display it to the user. Such a paywall contains both what should be shown within the paywall and how it should be shown."}),"\n",(0,a.jsxs)(t.admonition,{type:"warning",children:[(0,a.jsxs)(t.p,{children:["This guide is for ",(0,a.jsx)(t.strong,{children:"new Paywall Builder paywalls"})," only which require SDK v3.0. The process for presenting paywalls differs for paywalls designed with different versions of Paywall Builde, remote config paywalls, and ",(0,a.jsx)(t.a,{href:"observer-vs-full-mode",children:"Observer mode"}),"."]}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["For presenting ",(0,a.jsx)(t.strong,{children:"Legacy Paywall Builder paywalls"}),", check out ",(0,a.jsx)(t.a,{href:"android-present-paywalls-legacy",children:"Android- Present legacy Paywall Builder paywalls"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["For presenting ",(0,a.jsx)(t.strong,{children:"Remote config paywalls"}),", see ",(0,a.jsx)(t.a,{href:"present-remote-config-paywalls",children:"Render paywall designed by remote config"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["For presenting ",(0,a.jsx)(t.strong,{children:"Observer mode paywalls"}),", see ",(0,a.jsx)(t.a,{href:"android-present-paywall-builder-paywalls-in-observer-mode",children:"Android - Present Paywall Builder paywalls in Observer mode"})]}),"\n"]})]}),"\n",(0,a.jsxs)(l.A,{groupId:"current-os",queryString:!0,children:[(0,a.jsxs)(r.A,{value:"views",label:"Views",default:!0,children:[(0,a.jsxs)(t.p,{children:["In order to display the visual paywall on the device screen, you must first configure it. To do this, call the method ",(0,a.jsx)(t.code,{children:"AdaptyUI.getPaywallView()"})," or create the ",(0,a.jsx)(t.code,{children:"AdaptyPaywallView"})," directly:"]}),(0,a.jsxs)(l.A,{groupId:"current-os",queryString:!0,children:[(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin (option 1)",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",metastring:"showLineNumbers",children:"   val paywallView = AdaptyUI.getPaywallView(\n       activity,\n       viewConfiguration,\n       products,\n       eventListener,\n       insets,\n       personalizedOfferResolver,\n       tagResolver,\n       timerResolver,\n   )\n"})})}),(0,a.jsx)(r.A,{value:"kotlin2",label:"Kotlin (option 2)",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",metastring:"showLineNumbers",children:"   val paywallView =\n        AdaptyPaywallView(activity) // or retrieve it from xml\n   ...\n   with(paywallView) {\n       showPaywall(\n           viewConfiguration,\n           products,\n\t\t\t\t\t eventListener,\n           insets,\n           personalizedOfferResolver,\n           tagResolver,\n           timerResolver,\n       )\n   }\n"})})}),(0,a.jsx)(r.A,{value:"java",label:"Java (option 1)",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"showLineNumbers",children:"AdaptyPaywallView paywallView = AdaptyUI.getPaywallView(\n        activity,\n        viewConfiguration,\n        products,\n        eventListener,\n        insets,\n        personalizedOfferResolver,\n        tagResolver,\n        timerResolver\n);\n"})})}),(0,a.jsx)(r.A,{value:"java2",label:"Java (option 2)",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"showLineNumbers",children:"AdaptyPaywallView paywallView =\n  new AdaptyPaywallView(activity); //add to the view hierarchy if needed, or you receive it from xml\n...\npaywallView.showPaywall(viewConfiguration, products, eventListener, insets, personalizedOfferResolver, tagResolver, timerResolver);\n"})})}),(0,a.jsx)(r.A,{value:"XML",label:"XML",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:"showLineNumbers",children:'<com.adapty.ui.AdaptyPaywallView xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent" />\n'})})})]}),(0,a.jsx)(t.p,{children:"After the view has been successfully created, you can add it to the view hierarchy and display it on the screen of the device."}),(0,a.jsxs)(t.p,{children:["If you get ",(0,a.jsx)(t.code,{children:"AdaptyPaywallView"})," ",(0,a.jsx)(t.em,{children:"not"})," by calling ",(0,a.jsx)(t.code,{children:"AdaptyUI.getPaywallView()"}),", you will also need to call the ",(0,a.jsx)(t.code,{children:".showPaywall()"})," method."]})]}),(0,a.jsxs)(r.A,{value:"compose",label:"Jetpack Compose",default:!0,children:[(0,a.jsx)(t.p,{children:"In order to display the visual paywall on the device screen, you must first configure it. To do this, use this composable function:"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",metastring:"showLineNumbers",children:"AdaptyPaywallScreen(\n    viewConfiguration,\n    products,\n    eventListener,\n    insets,\n    personalizedOfferResolver,\n    tagResolver,\n    timerResolver,\n)\n"})})]})]}),"\n",(0,a.jsx)(t.p,{children:"Request parameters:"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Presence"}),(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.strong,{children:"viewConfiguration"})}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"required"}),(0,a.jsxs)(t.td,{style:{textAlign:"left"},children:["Supply an ",(0,a.jsx)(t.code,{children:"AdaptyUI.LocalizedViewConfiguration"})," object containing visual details of the paywall. Use the ",(0,a.jsx)(t.code,{children:"Adapty.getViewConfiguration(paywall)"})," method to load it. Refer to ",(0,a.jsx)(t.a,{href:"get-pb-paywalls#fetch-the-view-configuration-of-paywall-designed-using-paywall-builder",children:"Fetch the visual configuration of paywall"})," topic for more details."]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.strong,{children:"products"})}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"optional"}),(0,a.jsxs)(t.td,{style:{textAlign:"left"},children:["Provide an array of ",(0,a.jsx)(t.code,{children:"AdaptyPaywallProduct "}),"to optimize the display timing of products on the screen. If ",(0,a.jsx)(t.code,{children:"null"})," is passed, AdaptyUI will automatically fetch the required products."]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.strong,{children:"eventListener"})}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"optional"}),(0,a.jsxs)(t.td,{style:{textAlign:"left"},children:["Provide an ",(0,a.jsx)(t.code,{children:"AdaptyUiEventListener"})," to observe paywall events. Extending AdaptyUiDefaultEventListener is recommended for ease of use. Refer to ",(0,a.jsx)(t.a,{href:"android-handling-events",children:"Handling paywall events"}),"  topic for more details."]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.strong,{children:"insets"})}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"optional"}),(0,a.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,a.jsx)("p",{children:"Insets are the spaces around the paywall that prevent tapable elements from getting hidden behind system bars."}),(0,a.jsxs)("p",{children:["Default: ",(0,a.jsx)(t.code,{children:"UNSPECIFIED"})," which means Adapty will automatically adjust the insets, which works great for edge-to-edge paywalls. "]}),(0,a.jsxs)("p",{children:["If your paywall isn\u2019t edge-to-edge, you might want to set custom insets. For how to do that, read in the ",(0,a.jsx)(t.a,{href:"android-present-paywalls#change-paywall-insets",children:"Change paywall insets"})," section below."]})]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.strong,{children:"personalizedOfferResolver"})}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"optional"}),(0,a.jsxs)(t.td,{style:{textAlign:"left"},children:["To indicate personalized pricing (",(0,a.jsx)(t.a,{href:"https://developer.android.com/google/play/billing/integrate#personalized-price",children:"read more"}),"  ), implement ",(0,a.jsx)(t.code,{children:"AdaptyUiPersonalizedOfferResolver"}),"  and pass your own logic that maps ",(0,a.jsx)(t.code,{children:"AdaptyPaywallProduct"})," to true if the product's price is personalized, otherwise false."]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.strong,{children:"tagResolver"})}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"optional"}),(0,a.jsxs)(t.td,{style:{textAlign:"left"},children:["Use ",(0,a.jsx)(t.code,{children:"AdaptyUiTagResolver"})," to resolve custom tags within the paywall text. This resolver takes a tag parameter and resolves it to a corresponding string. Refer to ",(0,a.jsx)(t.a,{href:"custom-tags-in-paywall-builder",children:"Custom tags in Paywall Builder"})," topic for more details."]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.strong,{children:"timerResolver"})}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"optional"}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"Pass the resolver here if you are going to use custom timer functionality."})]})]})]}),"\n",(0,a.jsx)(i.Ay,{}),"\n",(0,a.jsx)(t.h2,{id:"change-paywall-insets",children:"Change paywall insets"}),"\n",(0,a.jsx)(t.p,{children:"Insets are the spaces around the paywall that prevent tapable elements from getting hidden behind system bars. By default, Adapty will automatically adjust the insets, which works great for edge-to-edge paywalls."}),"\n",(0,a.jsx)(t.p,{children:"If your paywall isn\u2019t edge-to-edge, you might want to set custom insets:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["If neither the status bar nor the navigation bar overlap with the ",(0,a.jsx)(t.code,{children:"AdaptyPaywallView"}),", use ",(0,a.jsx)(t.code,{children:"AdaptyPaywallInsets.NONE"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["For more custom setups, like if your paywall overlaps with the top status bar but not the bottom, you can set only the ",(0,a.jsx)(t.code,{children:"bottomInset"})," to ",(0,a.jsx)(t.code,{children:"0"}),", as shown in the example below:"]}),"\n"]}),"\n",(0,a.jsxs)(l.A,{groupId:"current-os",queryString:!0,children:[(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",metastring:"showLineNumbers",children:"import androidx.core.graphics.Insets\nimport androidx.core.view.ViewCompat\nimport androidx.core.view.WindowInsetsCompat\n\n//create extension function\nfun View.onReceiveSystemBarsInsets(action: (insets: Insets) -> Unit) {\n    ViewCompat.setOnApplyWindowInsetsListener(this) { _, insets ->\n        val systemBarInsets = insets.getInsets(WindowInsetsCompat.Type.systemBars())\n        ViewCompat.setOnApplyWindowInsetsListener(this, null)\n        action(systemBarInsets)\n        insets\n    }\n}\n//and then use it with the view\npaywallView.onReceiveSystemBarsInsets { insets ->\n    val paywallInsets = AdaptyPaywallInsets.vertical(insets.top, 0)\n    paywallView.showPaywall(\n           viewConfiguration,\n           products,\n\t\t\t\t\t eventListener,\n           paywallInsets,\n           personalizedOfferResolver,\n           tagResolver,\n           timerResolver,\n       )\n}\n"})})}),(0,a.jsx)(r.A,{value:"java",label:"Java",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"showLineNumbers",children:"import androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\n...\n\nViewCompat.setOnApplyWindowInsetsListener(paywallView, (view, insets) -> {\n    Insets systemBarInsets = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n    ViewCompat.setOnApplyWindowInsetsListener(paywallView, null);\n  \n    AdaptyPaywallInsets paywallInsets =\n                AdaptyPaywallInsets.of(systemBarInsets.top, 0);\n    paywallView.showPaywall(paywall, products, viewConfiguration, paywallInsets, productTitleResolver);\n            \n    return insets;\n});\n"})})})]}),"\n",(0,a.jsx)(t.h2,{id:"use-developer-defined-timer",children:"Use developer-defined timer"}),"\n",(0,a.jsxs)(t.p,{children:["To use developer-defined timers in your mobile app, create a ",(0,a.jsx)(t.code,{children:"timerResolver"})," object\u2014a dictionary or map that pairs custom timers with the string values that will replace them when the paywall is rendered. Here's an example:"]}),"\n",(0,a.jsxs)(l.A,{groupId:"current-os",queryString:!0,children:[(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",metastring:"showLineNumbers",children:'import java.util.Calendar\nimport java.util.Date\nimport java.util.TimeZone\n\n...\n\nval customTimers = mapOf(\n    "CUSTOM_TIMER_NY" to Calendar.getInstance(TimeZone.getDefault()).apply { set(2025, 0, 1) }.time, // New Year 2025\n)\nval timerResolver = AdaptyUiTimerResolver { timerId ->\n    customTimers.getOrElse(timerId, { Date(System.currentTimeMillis() + 3600 * 1000L) /* in 1 hour */ } )\n}\n'})})}),(0,a.jsx)(r.A,{value:"java",label:"Java",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-JAVA",metastring:"showLineNumbers",children:'import java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\n\n...\n\nMap<String, Date> customTimers = new HashMap<>();\ncustomTimers.put(\n        "CUSTOM_TIMER_NY",\n        new Calendar.Builder().setTimeZone(TimeZone.getDefault()).setDate(2025, 0, 1).build().getTime()\n);\nAdaptyUiTimerResolver timerResolver = new AdaptyUiTimerResolver() {\n    @NonNull\n    @Override\n    public Date timerEndAtDate(@NonNull String timerId) {\n        Date date = customTimers.get(timerId);\n        return date != null ? date : new Date(System.currentTimeMillis() + 3600 * 1000L); /* in 1 hour */\n    }\n};\n'})})})]}),"\n",(0,a.jsxs)(t.p,{children:["In this example, ",(0,a.jsx)(t.code,{children:"CUSTOM_TIMER_NY"})," is the ",(0,a.jsx)(t.strong,{children:"Timer ID"})," of the developer-defined timer you set in the Adapty dashboard. The ",(0,a.jsx)(t.code,{children:"timerResolver"})," ensures your app dynamically updates the timer with the correct value\u2014like ",(0,a.jsx)(t.code,{children:"13d 09h 03m 34s"})," (calculated as the timer\u2019s end time, such as New Year\u2019s Day, minus the current time)."]}),"\n",(0,a.jsx)(t.h2,{id:"use-custom-tags",children:"Use custom tags"}),"\n",(0,a.jsxs)(t.p,{children:["To use custom tags in your mobile app, create a ",(0,a.jsx)(t.code,{children:"tagResolver"})," object\u2014a dictionary or map that pairs custom tags with the string values that will replace them when the paywall is rendered. Here's an example:"]}),"\n",(0,a.jsxs)(l.A,{groupId:"current-os",queryString:!0,children:[(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",metastring:"showLineNumbers",children:'val customTags = mapOf("USERNAME" to "John")\nval tagResolver = AdaptyUiTagResolver { tag -> customTags[tag] }\n'})})}),(0,a.jsx)(r.A,{value:"java",label:"Java",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",metastring:"showLineNumbers",children:'Map<String, String> customTags = new HashMap<>();\ncustomTags.put("USERNAME", "John");\nAdaptyUiTagResolver tagResolver = customTags::get;\n'})})})]}),"\n",(0,a.jsxs)(t.p,{children:["In this example, ",(0,a.jsx)(t.code,{children:"USERNAME"})," is a custom tag you entered in the Adapty dashboard as ",(0,a.jsx)(t.code,{children:"<USERNAME/>"}),". The ",(0,a.jsx)(t.code,{children:"tagResolver"})," ensures that your app dynamically replaces this custom tag with the specified value\u2014like ",(0,a.jsx)(t.code,{children:"John"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["We recommend creating and populating the ",(0,a.jsx)(t.code,{children:"tagResolver"})," right before presenting your paywall. Once it's ready, pass it to the AdaptyUI method you use for presenting the paywall."]}),"\n",(0,a.jsx)(t.h2,{id:"change-paywall-loading-indicator-color",children:"Change paywall loading indicator color"}),"\n",(0,a.jsx)(t.p,{children:"You can override the default color of the loading indicator in the following way:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-XML",metastring:'showLineNumbers title = "XML"',children:'\x3c!--your theme --\x3e\n<style name="AppTheme" parent="android:Theme.Material.Light.NoActionBar">\n    \x3c!--other attrs --\x3e\n    <item name="adapty_progressIndicatorColor">@color/yourColor</item>\n</style>\n'})})]})}function y(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},97808:(e,t,n)=>{n.d(t,{Ay:()=>i,RM:()=>l});var a=n(74848),s=n(28453);const l=[];function r(e){const t={a:"a",admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["Want to see a real-world example of how Adapty SDK is integrated into a mobile app? Check out our ",(0,a.jsx)(t.a,{href:"sample-apps",children:"sample apps"}),", which demonstrate the full setup, including displaying paywalls, making purchases, and other basic functionality."]})})}function i(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}}}]);