"use strict";(self.webpackChunkadapty_docs=self.webpackChunkadapty_docs||[]).push([[9644],{11470:(e,a,t)=>{t.d(a,{A:()=>j});var l=t(96540),n=t(34164),o=t(23104),r=t(56347),i=t(205),s=t(57485),c=t(31682),d=t(70679);function u(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:a,children:t}=e;return(0,l.useMemo)((()=>{const e=a??function(e){return u(e).map((e=>{let{props:{value:a,label:t,attributes:l,default:n}}=e;return{value:a,label:t,attributes:l,default:n}}))}(t);return function(e){const a=(0,c.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function p(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function m(e){let{queryString:a=!1,groupId:t}=e;const n=(0,r.W6)(),o=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,s.aZ)(o),(0,l.useCallback)((e=>{if(!o)return;const a=new URLSearchParams(n.location.search);a.set(o,e),n.replace({...n.location,search:a.toString()})}),[o,n])]}function g(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,o=h(e),[r,s]=(0,l.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!p({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const l=t.find((e=>e.default))??t[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:a,tabValues:o}))),[c,u]=m({queryString:t,groupId:n}),[g,f]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,o]=(0,d.Dv)(t);return[n,(0,l.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:n}),y=(()=>{const e=c??g;return p({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{y&&s(y)}),[y]);return{selectedValue:r,selectValue:(0,l.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),f(e)}),[u,f,o]),tabValues:o}}var f=t(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var w=t(74848);function b(e){let{className:a,block:t,selectedValue:l,selectValue:r,tabValues:i}=e;const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const a=e.currentTarget,t=s.indexOf(a),n=i[t].value;n!==l&&(c(a),r(n))},u=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;a=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;a=s[t]??s[s.length-1];break}}a?.focus()};return(0,w.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.A)("tabs",{"tabs--block":t},a),children:i.map((e=>{let{value:a,label:t,attributes:o}=e;return(0,w.jsx)("li",{role:"tab",tabIndex:l===a?0:-1,"aria-selected":l===a,ref:e=>s.push(e),onKeyDown:u,onClick:d,...o,className:(0,n.A)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":l===a}),children:t??a},a)}))})}function x(e){let{lazy:a,children:t,selectedValue:n}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=o.find((e=>e.props.value===n));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return(0,w.jsx)("div",{className:"margin-top--md",children:o.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==n})))})}function v(e){const a=g(e);return(0,w.jsxs)("div",{className:(0,n.A)("tabs-container",y.tabList),children:[(0,w.jsx)(b,{...a,...e}),(0,w.jsx)(x,{...a,...e})]})}function j(e){const a=(0,f.A)();return(0,w.jsx)(v,{...e,children:u(e.children)},String(a))}},19365:(e,a,t)=>{t.d(a,{A:()=>r});t(96540);var l=t(34164);const n={tabItem:"tabItem_Ymn6"};var o=t(74848);function r(e){let{children:a,hidden:t,className:r}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,l.A)(n.tabItem,r),hidden:t,children:a})}},20876:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var l=t(74848),n=t(28453),o=(t(26393),t(11470)),r=t(19365);const i={title:"Use localizations and locale codes",description:"Manage app localizations and locale codes to reach a global audience.",metadataTitle:"Managing Localizations & Locale Codes | Adapty Docs"},s=void 0,c={id:"localizations-and-locale-codes",title:"Use localizations and locale codes",description:"Manage app localizations and locale codes to reach a global audience.",source:"@site/versioned_docs/version-3.0/localizations-and-locale-codes.md",sourceDirName:".",slug:"/localizations-and-locale-codes",permalink:"/docs/localizations-and-locale-codes",draft:!1,unlisted:!1,tags:[],version:"3.0",frontMatter:{title:"Use localizations and locale codes",description:"Manage app localizations and locale codes to reach a global audience.",metadataTitle:"Managing Localizations & Locale Codes | Adapty Docs"},sidebar:"tutorialSidebar",previous:{title:"Unity - Use fallback paywalls",permalink:"/docs/unity-use-fallback-paywalls"},next:{title:"Implement Observer mode",permalink:"/docs/implement-observer-mode"}},d={},u=[{value:"Why this is important",id:"why-this-is-important",level:2},{value:"Locale code standard at Adapty",id:"locale-code-standard-at-adapty",level:2},{value:"Locale code matching",id:"locale-code-matching",level:2},{value:"Implementing localizations: recommended way",id:"implementing-localizations-recommended-way",level:2},{value:"Implementing localizations: the other way",id:"implementing-localizations-the-other-way",level:2}];function h(e){const a={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.h2,{id:"why-this-is-important",children:"Why this is important"}),"\n",(0,l.jsx)(a.p,{children:"There are a few scenarios when locale codes come into play \u2014 for example, when you're trying to fetch the correct paywall for the current localization of your app."}),"\n",(0,l.jsx)(a.p,{children:"As locale codes are complicated and can vary from platform to platform, we rely on an internal standard for all the platforms we support. However, because these codes are complicated, it is really important for you to understand what exactly are you sending to our server to get the correct localization, and what happens next \u2014 so you will always receive what you expect."}),"\n",(0,l.jsx)(a.h2,{id:"locale-code-standard-at-adapty",children:"Locale code standard at Adapty"}),"\n",(0,l.jsxs)(a.p,{children:["For locale codes, Adapty uses a slightly modified ",(0,l.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/IETF_language_tag",children:"BCP 47 standard"}),": every code consists of lowercase subtags, separated by hyphens. Some examples: ",(0,l.jsx)(a.code,{children:"en"})," (English), ",(0,l.jsx)(a.code,{children:"pt-br"})," (Portuguese (Brazil)), ",(0,l.jsx)(a.code,{children:"zh"})," (Simplified Chinese), ",(0,l.jsx)(a.code,{children:"zh-hant"})," (Traditional Chinese)."]}),"\n",(0,l.jsx)(a.h2,{id:"locale-code-matching",children:"Locale code matching"}),"\n",(0,l.jsx)(a.p,{children:"When Adapty receives a call from the client-side SDK with the locale code and starts looking for a corresponding localization of a paywall, the following happens:"}),"\n",(0,l.jsxs)(a.ol,{children:["\n",(0,l.jsxs)(a.li,{children:["The incoming locale string is converted to lowercase and all the underscores (",(0,l.jsx)(a.code,{children:"_"}),") are replaced with hyphens (",(0,l.jsx)(a.code,{children:"-"}),")"]}),"\n",(0,l.jsx)(a.li,{children:"We then look for the localization with the fully matching locale code"}),"\n",(0,l.jsxs)(a.li,{children:["If no match was found, we take the substring before the first hyphen (",(0,l.jsx)(a.code,{children:"pt"})," for ",(0,l.jsx)(a.code,{children:"pt-br"}),") and look for the matching localization"]}),"\n",(0,l.jsxs)(a.li,{children:["If no match was found again, we return the default ",(0,l.jsx)(a.code,{children:"en"})," localization"]}),"\n"]}),"\n",(0,l.jsxs)(a.p,{children:["This way an iOS device that sent ",(0,l.jsx)(a.code,{children:"'pt_BR'"}),", an Android device that sent ",(0,l.jsx)(a.code,{children:"pt-BR"}),", and another device that sent ",(0,l.jsx)(a.code,{children:"pt-br"})," will get the same result."]}),"\n",(0,l.jsx)(a.h2,{id:"implementing-localizations-recommended-way",children:"Implementing localizations: recommended way"}),"\n",(0,l.jsx)(a.p,{children:"If you're wondering about localizations, chances are you're already dealing with the localized string files in your project. If that's the case, we recommend placing some key-value with the intended Adapty locale code in each of your files for the corresponding localizations. And then extract the value for this key when calling our SDK, like so:"}),"\n",(0,l.jsxs)(o.A,{groupId:"current-os",queryString:!0,children:[(0,l.jsx)(r.A,{value:"swift",label:"iOS",default:!0,children:(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-swift",metastring:"showLineNumbers",children:'// 1. Modify your Localizable.strings files\n\n/*\nLocalizable.strings - Spanish\n*/\nadapty_paywalls_locale = "es";\n/*\nLocalizable.strings - Portuguese (Brazil)\n*/\nadapty_paywalls_locale = "pt-br";\n// 2. Extract and use the locale code\nlet locale = NSLocalizedString("adapty_paywalls_locale", comment: "")\n// pass locale code to AdaptyUI.getViewConfiguration or Adapty.getPaywall method\n'})})}),(0,l.jsx)(r.A,{value:"kotlin",label:"Android",default:!0,children:(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-kotlin",metastring:"showLineNumbers",children:'// 1. Modify your strings.xml files\n\n/*\nstrings.xml - Spanish\n*/\n<string name="adapty_paywalls_locale">es</string>\n\n/*\nstrings.xml - Portuguese (Brazil)\n*/\n<string name="adapty_paywalls_locale">pt-br</string>\n\n// 2. Extract and use the locale code\n\nval localeCode = context.getString(R.string.adapty_paywalls_locale)\n// pass locale code to AdaptyUI.getViewConfiguration or Adapty.getPaywall method\n'})})})]}),"\n",(0,l.jsx)(a.p,{children:"That way you can ensure you're in full control of what localization will be retrieved for every user of your app."}),"\n",(0,l.jsx)(a.h2,{id:"implementing-localizations-the-other-way",children:"Implementing localizations: the other way"}),"\n",(0,l.jsx)(a.p,{children:"You can get similar (but not identical) results without explicitly defining locale codes for every localization. That would mean extracting a locale code from some other objects that your platform provides, like this:"}),"\n",(0,l.jsxs)(o.A,{groupId:"current-os",queryString:!0,children:[(0,l.jsx)(r.A,{value:"swift",label:"iOS",default:!0,children:(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-swift",metastring:"showLineNumbers",children:"let locale = Locale.current.identifier\n// pass locale code to AdaptyUI.getViewConfiguration or Adapty.getPaywall method\n"})})}),(0,l.jsx)(r.A,{value:"kotlin",label:"Android",default:!0,children:(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-kotlin",metastring:"showLineNumbers",children:"val locale = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)\n    context.resources.configuration.locales[0]\nelse\n    context.resources.configuration.locale\n\nval localeCode = locale.toLanguageTag()\n// pass locale code to AdaptyUI.getViewConfiguration or Adapty.getPaywall method\n"})})})]}),"\n",(0,l.jsx)(a.p,{children:"Note that we don't recommend this approach due to few reasons:"}),"\n",(0,l.jsxs)(a.ol,{children:["\n",(0,l.jsx)(a.li,{children:"On iOS preferred languages and current locale are not identical. If you want the localization to be picked correctly you'll have to either rely on Apple's logic, which works out of the box if you're using the recommended approach with localized string files, or re-create it."}),"\n",(0,l.jsxs)(a.li,{children:["It's hard to predict what exactly will Adapty's server get. For example, on iOS, it is possible to obtain a locale like ",(0,l.jsx)(a.code,{children:"ar_OM@numbers='latn'"})," on a device and send it to our server. And for this call you will get not the ",(0,l.jsx)(a.code,{children:"ar-om"})," localization you were looking for, but rather ",(0,l.jsx)(a.code,{children:"ar"}),", which is likely unexpected."]}),"\n"]}),"\n",(0,l.jsx)(a.p,{children:"Should you decide to use this approach anyway \u2014 make sure you've covered all the relevant use cases."})]})}function p(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}}}]);