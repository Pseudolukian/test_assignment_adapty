"use strict";(self.webpackChunkadapty_docs=self.webpackChunkadapty_docs||[]).push([[3529],{8253:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/refund-saver-profile-preference-8199fdd171631b4aa2dc7b129035405a.webp"},11470:(e,n,t)=>{t.d(n,{A:()=>A});var r=t(96540),s=t(34164),a=t(23104),i=t(56347),o=t(205),l=t(57485),d=t(31682),u=t(70679);function c(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const s=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(s.location.search);n.set(a,e),s.replace({...s.location,search:n.toString()})}),[a,s])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,a=p(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:a}))),[d,c]=f({queryString:t,groupId:s}),[v,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,a]=(0,u.Dv)(t);return[s,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:s}),y=(()=>{const e=d??v;return h({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{y&&l(y)}),[y]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),m(e)}),[c,m,a]),tabValues:a}}var m=t(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function b(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),s=o[t].value;s!==r&&(d(n),i(s))},c=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:c,onClick:u,...a,className:(0,s.A)("tabs__item",y.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function j(e){const n=v(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",y.tabList),children:[(0,x.jsx)(b,{...n,...e}),(0,x.jsx)(g,{...n,...e})]})}function A(e){const n=(0,m.A)();return(0,x.jsx)(j,{...e,children:c(e.children)},String(n))}},14066:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/refund-saver-profile-consent-73cd6f1bd6eb5c6cf37acb19883e2f21.webp"},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(34164);const s={tabItem:"tabItem_Ymn6"};var a=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:t,children:n})}},28423:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/refunds-chart-40a61c592d97a3f4ca3b3eae511a6b88.webp"},34981:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/refund-saver-preference-b1766ad7b77198f64dfc16ab237d754e.webp"},45994:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/refund-saver-consent-2891cb2f73a375d3eee72abeb58e7c9a.webp"},46582:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=t(74848),s=t(28453),a=t(34028),i=(t(26393),t(11470)),o=t(19365);const l={title:"Refund Saver",description:"Use Adapty Refund Saver to minimize refunds and maximize revenue.",metadataTitle:"Using Adapty Refund Saver to Reduce Refunds | Adapty Docs"},d=void 0,u={id:"refund-saver",title:"Refund Saver",description:"Use Adapty Refund Saver to minimize refunds and maximize revenue.",source:"@site/versioned_docs/version-3.0/refund-saver.md",sourceDirName:".",slug:"/refund-saver",permalink:"/docs/refund-saver",draft:!1,unlisted:!1,tags:[],version:"3.0",frontMatter:{title:"Refund Saver",description:"Use Adapty Refund Saver to minimize refunds and maximize revenue.",metadataTitle:"Using Adapty Refund Saver to Reduce Refunds | Adapty Docs"},sidebar:"tutorialSidebar",previous:{title:"Firebase apps",permalink:"/docs/firebase-apps"},next:{title:"Server-side API v2",permalink:"/docs/getting-started-with-server-side-api"}},c={},p=[{value:"What is the Refund Saver?",id:"what-is-the-refund-saver",level:2},{value:"Requirements to use Refund Saver",id:"requirements-to-use-refund-saver",level:2},{value:"Turn on Refund Saver",id:"turn-on-refund-saver",level:2},{value:"Set a default refund behavior",id:"set-a-default-refund-behavior",level:2},{value:"Set refund behavior for a specific user in the dashboard",id:"set-refund-behavior-for-a-specific-user-in-the-dashboard",level:2},{value:"Set refund behavior for a specific user in the SDK",id:"set-refund-behavior-for-a-specific-user-in-the-sdk",level:2},{value:"Obtain user consent",id:"obtain-user-consent",level:2},{value:"Update user consent in the SDK",id:"update-user-consent-in-the-sdk",level:2},{value:"Check user consent",id:"check-user-consent",level:2},{value:"Limitations",id:"limitations",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The Refund Saver helps Adapty users efficiently manage refund requests from Apple\u2019s App Store using automation. By streamlining this process, it reduces revenue loss and saves time. With real-time notifications and actionable insights, this tool ensures you address refund requests effectively while staying compliant with Apple\u2019s guidelines."}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)("img",{src:t(28423).A,style:{border:"1px solid #727272",width:"500px",display:"block",margin:"0 auto"}})}),"\n",(0,r.jsx)(n.h2,{id:"what-is-the-refund-saver",children:"What is the Refund Saver?"}),"\n",(0,r.jsxs)(n.p,{children:["When users request refunds on the App Store, Apple evaluates consumption data related to the in-app purchase to decide whether to approve or deny the request. For example, if a user buys a subscription, uses it heavily for most of the subscription period, and then requests a refund, Apple is likely to approve it unless you provide usage data to show the subscription was actively consumed. Apple ",(0,r.jsx)(n.a,{href:"https://developer.apple.com/documentation/appstoreserverapi/send_consumption_information",children:"encourages developers"})," to share this data to ensure refund decisions are fair."]}),"\n",(0,r.jsxs)(n.p,{children:["Adapty\u2019s Refund Saver automates this process while remaining fully compliant with App Store ",(0,r.jsx)(n.a,{href:"https://developer.apple.com/documentation/appstoreserverapi/send_consumption_information",children:"guidelines"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Here\u2019s how it works:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When a user initiates a refund request, the App Store sends a notification asking for transaction and usage details."}),"\n",(0,r.jsx)(n.li,{children:"If you ignore or delay the response, Apple is likely to approve the refund by default."}),"\n",(0,r.jsx)(n.li,{children:"Adapty automatically processes these notifications, providing Apple with the necessary data."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This automation reduces the chance of unnecessary refunds while saving you time and protecting your revenue."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"With Refund Saver, you can save up to 40% of the revenue from refund requests."})}),"\n",(0,r.jsx)(n.h2,{id:"requirements-to-use-refund-saver",children:"Requirements to use Refund Saver"}),"\n",(0,r.jsx)(n.p,{children:"To use this feature, ensure you\u2019ve met the following prerequisites:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update your Privacy Policy in App Store Connect:"}),"\nYour app\u2019s Privacy Policy must disclose the collection and use of consumption data. This ensures users understand your app\u2019s privacy practices before downloading it. Refer to ",(0,r.jsx)(n.a,{href:"https://developer.apple.com/app-store/app-privacy-details/",children:"Apple\u2019s App Privacy Details"})," for guidance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Obtain user consent for data sharing in your app"}),":\nApple insists that you must obtain valid consent from the user before sharing their personal data with Apple. As the developer, you\u2019re responsible for obtaining this consent since you\u2019ll be sharing user data with Apple. See Apple\u2019s ",(0,r.jsx)(n.a,{href:"https://developer.apple.com/documentation/appstoreserverapi/send_consumption_information#3921151",children:"guidelines"})," for more details."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enable Server Notifications V2:"}),"\nEnsure that Server Notifications V2 are activated in your Apple Developer account and properly configured in Adapty, as V1 notifications are not supported. If they aren\u2019t activated yet, follow the steps in the ",(0,r.jsx)(n.a,{href:"enable-app-store-server-notifications",children:"Enable App Store server notifications"})," guide"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"turn-on-refund-saver",children:"Turn on Refund Saver"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Open the ",(0,r.jsx)(n.a,{href:"https://app.adapty.io/refund-saver",children:"Refund Saver"})," section in the Adapty Dashboard."]}),"\n"]}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)("img",{src:t(78973).A,style:{border:"1px solid #727272",width:"700px",display:"block",margin:"0 auto"}})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.strong,{children:"Turn on Refund Saver"})," to activate the feature."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"set-a-default-refund-behavior",children:"Set a default refund behavior"}),"\n",(0,r.jsx)(n.p,{children:"Apple allows developers to specify a preferential outcome for each refund request when responding to it. The purpose of this setting is to find the right balance between declining and accepting refund requests so that only fair refunds are provided. Note that this setting is only used to influence an outcome, but ultimately the decision is still up to Apple."}),"\n",(0,r.jsx)(n.p,{children:"Adapty supports setting this preference, but we will use the same value for every refund request."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["To change your preference, click ",(0,r.jsx)(n.strong,{children:"Edit refund preference"}),"."]}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)("img",{src:t(34981).A,style:{border:"1px solid #727272",width:"700px",display:"block",margin:"0 auto"}})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.strong,{children:"Edit refund preference"})," window, choose your ",(0,r.jsx)(n.strong,{children:"Default refund request preference"})," option:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Always decline"}),(0,r.jsx)(n.td,{children:"(default) This is the default option and usually yields the best results for minimizing refunds."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Decline first refund request, grant all next"}),(0,r.jsx)(n.td,{children:"For every transaction Refund Saver encounters, it will initially ask Apple to decline the refund. However, if the same transaction appears again, Refund Saver will always recommend granting the refund. This approach helps minimize user frustration from unfair refund declines \u2014 users can simply request the refund again and will likely receive it."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Always refund"}),(0,r.jsx)(n.td,{children:"Suggests that Apple approve every refund request."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"No preference"}),(0,r.jsx)(n.td,{children:"Do not provide any recommendations to Apple. In this case, Apple will determine the refund outcome based on its internal policies and user history, without any influence from your settings. This option provides the most neutral approach."})]})]})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"set-refund-behavior-for-a-specific-user-in-the-dashboard",children:"Set refund behavior for a specific user in the dashboard"}),"\n",(0,r.jsxs)(n.p,{children:["Even if you\u2019ve configured the default Refund Saver behavior for the entire app, you may want to set individual preferences for specific users. In the Adapty Dashboard, you can do this from the user\u2019s profile. Use the ",(0,r.jsx)(n.strong,{children:"Refund Saver Preferences"})," section located at the bottom left."]}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)("img",{src:t(8253).A,style:{border:"1px solid #727272",width:"700px",display:"block",margin:"0 auto"}})}),"\n",(0,r.jsx)(n.h2,{id:"set-refund-behavior-for-a-specific-user-in-the-sdk",children:"Set refund behavior for a specific user in the SDK"}),"\n",(0,r.jsx)(n.p,{children:"You can set the refund preference in your app code individually for every installation depending on some user's actions. Use the snippet below to set the preference:"}),"\n",(0,r.jsxs)(i.A,{groupId:"current-os",queryString:!0,children:[(0,r.jsx)(o.A,{value:"swift",label:"iOS (3.4.1+)",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",metastring:"showLineNumbers code  ",children:"do {\n  try await Adapty.updateRefundPreference(<PREFERENCE_VALUE>)\n} catch {\n  // handle the error\n}\n"})})}),(0,r.jsx)(o.A,{value:"flutter",label:"Flutter (3.4.0+)",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:"showLineNumbers code  ",children:"try {\n  await Adapty().updateRefundPreference(<PREFERENCE_VALUE>);\n} on AdaptyError catch (adaptyError) {\n  // handle the error\n} catch (e) {\n  // handle the error\n}\n"})})}),(0,r.jsx)(o.A,{value:"rn",label:"React Native (3.4.0+)",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers",children:"try {\n    await adapty.updateRefundPreference(<PREFERENCE_VALUE>);\n} catch (error) {\n    // handle the `AdaptyError`\n}\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"obtain-user-consent",children:"Obtain user consent"}),"\n",(0,r.jsxs)(n.p,{children:["How you collect user consent for data sharing is up to you, but Apple requires valid user consent before sharing any personal data with them. Apple recommends using an ",(0,r.jsx)(n.strong,{children:"opt-in approach"}),", which involves in-app prompts that explain how data will be used and require explicit user action to provide consent. If a user ignores or denies the prompt, they are not considered to have consented. For more details, refer to Apple\u2019s ",(0,r.jsx)(n.a,{href:"https://developer.apple.com/documentation/appstoreserverapi/send_consumption_information#3921151",children:"guidelines"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If explicit consent isn\u2019t practical for your app, you can consider an ",(0,r.jsx)(n.strong,{children:"opt-out approach"}),". This involves including a data-sharing clause in your Terms of Service, explaining that users agree to data sharing by accepting the terms. Be sure to clearly outline how users can revoke their consent."]}),"\n",(0,r.jsx)(n.p,{children:"Below is an example clause for the opt-out approach, including the types of data you might share. This is only a sample to guide you in crafting your own text. You are responsible for ensuring your final version complies with all applicable laws and Apple\u2019s requirements."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:'"If we receive a refund request for an in-app purchase, we may provide Apple with information about the user\'s in-app purchase activity. This could include details such as time since app installation, total app usage time, an anonymous account identifier, whether the in-app purchase was fully consumed, whether it included a trial period, the total amount spent, and the total amount refunded."'})}),"\n",(0,r.jsxs)(n.p,{children:["Depending on your chosen approach, set the ",(0,r.jsx)(n.strong,{children:"Default consent policy"})," option in the ",(0,r.jsx)(n.strong,{children:"Edit refund preferences"})," menu:"]}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)("img",{src:t(45994).A,style:{border:"1px solid #727272",width:"700px",display:"block",margin:"0 auto"}})}),"\n",(0,r.jsx)("p",{}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Opt-out"}),(0,r.jsxs)(n.td,{children:["(default) If Adapty doesn't know the user's consent status, it assumes consent ",(0,r.jsx)(n.strong,{children:"was given"})," and Refund Saver ",(0,r.jsx)(n.strong,{children:"will share"})," refund-related data with Apple."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Opt-in"}),(0,r.jsxs)(n.td,{children:["If Adapty doesn't know the user's consent status, it assumes consent ",(0,r.jsx)(n.strong,{children:"was not given"})," and Refund Saver ",(0,r.jsx)(n.strong,{children:"won\u2019t share"})," any data with Apple. This is Apple\u2019s recommended approach."]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"update-user-consent-in-the-sdk",children:"Update user consent in the SDK"}),"\n",(0,r.jsxs)(n.p,{children:["To tell Adapty whether a specific user has given consent, use the ",(0,r.jsx)(n.code,{children:"updateCollectingRefundDataConsent"})," method:"]}),"\n",(0,r.jsxs)(i.A,{groupId:"current-os",queryString:!0,children:[(0,r.jsx)(o.A,{value:"swift",label:"iOS (3.4.1+)",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",metastring:"showLineNumbers ",children:"do {\n try await Adapty.updateCollectingRefundDataConsent(<CONSENT_VALUE>) // true = consent is explicitly provided, false = consent is explicitly revoked\n} catch {\n // handle the error\n}\n"})})}),(0,r.jsx)(o.A,{value:"flutter",label:"Flutter (3.4.0+)",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",metastring:"showLineNumbers ",children:"try {\n  // true = user gave consent, false = user revoked consent\n  await Adapty().updateCollectingRefundDataConsent(<CONSENT_VALUE>); \n} on AdaptyError catch (adaptyError) {\n  // handle the error\n} catch (e) {\n  // handle the error\n}\n"})})}),(0,r.jsx)(o.A,{value:"rn",label:"React Native (3.4.0+)",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:"showLineNumbers ",children:"try {\n    await adapty.updateCollectingRefundDataConsent(<CONSENT_VALUE>); // true = consent is explicitly provided, false = consent is explicitly revoked\n} catch (error) {\n    // handle the `AdaptyError`\n}   \n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"check-user-consent",children:"Check user consent"}),"\n",(0,r.jsxs)(n.p,{children:["You can check a user\u2019s current consent status anytime. In the Adapty Dashboard, just open the user\u2019s profile and look for the ",(0,r.jsx)(n.strong,{children:"Allow data sharing"})," setting in the ",(0,r.jsx)(n.strong,{children:"Refund Saver Preferences"})," section at the bottom left."]}),"\n",(0,r.jsx)(a.A,{children:(0,r.jsx)("img",{src:t(14066).A,style:{border:"1px solid #727272",width:"700px",display:"block",margin:"0 auto"}})}),"\n",(0,r.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Apple\u2019s App Store only:"})," Refund Saver is only available for refund requests made to Apple\u2019s App Store. Google Play doesn\u2019t offer consumption data analysis for refunds. Refund decisions on Google Play are based solely on Google\u2019s policies and the information provided by the user."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Requires Server Notifications V2:"})," Refund Saver is not compatible with App Store Server Notifications V1. If you\u2019re currently using V1 in Adapty, you need to switch to V2, see the ",(0,r.jsx)(n.a,{href:"enable-app-store-server-notifications",children:"Sending App Store server notifications to Adapty"})," guide for details. Switching to V2 will also improve your analytics in Adapty by providing more accurate and comprehensive data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not for consumables:"})," Refund Saver does not apply to consumable products."]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},78973:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/refund-off-fa3946310e6c7fd115f8fdf317295f80.webp"}}]);